// The following is a simple example that can be run in your browser console
// it's not meant to be a complete use-case, but to expose why you'd
// want to use `cap-js` for a better dev experience
// See https://github.com/Psychedelic/cap-js
(async () => {
  // The mainnet hostname
  const host = 'https://ic0.app';
  // The mainnet Router Canister Id
  const canisterId = 'lj532-6iaaa-aaaah-qcc7a-cai'
  // Whitelist the canister id for Plug permissions
  const whitelist = [canisterId];

  // Initialise Agent, expects no return value
  await window?.ic?.plug?.requestConnect({
    host,
    whitelist,
  });

  // An interface factory object is required
  // we have generated by running the `didc` command
  // against the Cap Candid declarations
  // See https://github.com/dfinity/candid
  // and https://github.com/psychedelic/cap
  // You're advised to use `cap-js` to simplify the dev experience
  // See https://github.com/psychedelic/cap-js
  const interfaceFactory = ({ IDL }) => {
    const WithWitnessArg = IDL.Record({ witness: IDL.Bool });
    const Witness = IDL.Record({
      certificate: IDL.Vec(IDL.Nat8),
      tree: IDL.Vec(IDL.Nat8),
    });
    const GetIndexCanistersResponse = IDL.Record({
      witness: IDL.Opt(Witness),
      canisters: IDL.Vec(IDL.Principal),
    });
    const GetTokenContractRootBucketArg = IDL.Record({
      witness: IDL.Bool,
      canister: IDL.Principal,
    });
    const GetTokenContractRootBucketResponse = IDL.Record({
      witness: IDL.Opt(Witness),
      canister: IDL.Opt(IDL.Principal),
    });
    const GetUserRootBucketsArg = IDL.Record({
      user: IDL.Principal,
      witness: IDL.Bool,
    });
    const GetUserRootBucketsResponse = IDL.Record({
      witness: IDL.Opt(Witness),
      contracts: IDL.Vec(IDL.Principal),
    });
    return IDL.Service({
      deploy_plug_bucket: IDL.Func([IDL.Principal, IDL.Nat64], [], []),
      get_index_canisters: IDL.Func(
        [WithWitnessArg],
        [GetIndexCanistersResponse],
        ["query"]
      ),
      get_token_contract_root_bucket: IDL.Func(
        [GetTokenContractRootBucketArg],
        [GetTokenContractRootBucketResponse],
        ["query"]
      ),
      get_user_root_buckets: IDL.Func(
        [GetUserRootBucketsArg],
        [GetUserRootBucketsResponse],
        ["query"]
      ),
      insert_new_users: IDL.Func([IDL.Principal, IDL.Vec(IDL.Principal)], [], []),
      install_bucket_code: IDL.Func([IDL.Principal], [], []),
    });
  };  

  // Plyg provides a `createActor` method
  const actor = await window.ic.plug.createActor({
    canisterId,
    interfaceFactory,
  });

  // At this point, the actor instance is available to use
  // here's the object instance
  console.log('actor instance', actor);

  // The following script was a simple example on how to instantiate
  // the CapRouter using Plug, directly in your developer console of your browser
  // Since method calls where Principal's are expected
  // you'll have to import the @dfinity/principal
  // which would not let you execute this script
  // in the developer console of your browser
  // at time of writing the @dfinity/principal is not available throught a CDN
  // To go further, you're advised to check the `basic` example
  // or the `cap-js` documentation
})()